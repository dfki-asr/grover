<! This file is part of Grover. It is subject to the license terms in
   the LICENSE file found in the top-level directory of this distribution.
   You may not use this file except in compliance with the License.
!>

VOCAB(vocabName, namespaceUri, localClassNames, localPropertyNames) ::=
"
/**
 * This file has been automatically generated using Grover (https://github.com/rmrschub/grover).
 * It contains static constants for the terms in the <vocabName> vocabulary.
 */
<! define package !>
package de.dfki.grover.vocabularies;

<! include imports !>
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.ResourceFactory;
import org.apache.jena.shared.PrefixMapping;

public final class <vocabName> 
{
  public static final String PREFIX = \"<vocabName>\";
  public static final PrefixMapping NAMESPACE = PrefixMapping.Factory.create().setNsPrefix(PREFIX, CONSTANTS.NS);

  <if(localClassNames)>
  /** 
   * Classes as org.apache.jena.rdf.model.Resource
   */
  <localClassNames:{ c |public static final Resource <c> = resource(CONSTANTS.CLASS_<c>);<\n>}>
  <endif>
  <! !>
  <if(localPropertyNames)>
  /** 
   * Properties as org.apache.jena.rdf.model.Property
   */
  <localPropertyNames:{ p |public static final Property <p> = property(CONSTANTS.PROP_<p>);<\n>}>
  <endif>
  <! !>
  <if(localInstanceNames)>
  /** 
   * Instances as org.apache.jena.rdf.model.Resource
   */
  <localInstanceNames:{ i |public static final Resource <i> = resource(CONSTANTS.INST_<i>);<\n>}> 
  <endif>
  
  /**
   * Returns a Jena resource for the given namespace name 
   * @param nsName  the full namespace name of a vocabulary element as a string
   * @return the vocabulary element with given namespace name as a org.apache.jena.rdf.model.Resource
   */
  private static final Resource resource(String nsName)
  {
    return ResourceFactory.createResource(nsName); 
  }

  /**
   * Returns a Jena property for the given namespace name
   * @param nsName  the full namespace name of a vocabulary element as a string
   * @return the vocabulary element with given namespace name as a org.apache.jena.rdf.model.Property
   */
  private static final Property property(String nsName)
  { 
    return ResourceFactory.createProperty(nsName);
  }

  private static final class CONSTANTS 
  {
    /**
     * Vocabulary namespace URI as string 
     */
    private static final String NS = \"<namespaceUri>\";

    <if(localClassNames)>
    /**
     * Local and namespace names of RDF(S) classes as strings 
     */
    <localClassNames:{ c |private static final String CLASS_LNAME_<c> = \"<c>\";<\n>private static final String CLASS_<c> = nsName(CLASS_LNAME_<c>);<\n>}>
    <endif>
    <! !>
    <if(localPropertyNames)>
    /**
     * Local and namespace names of RDF(S) properties as strings 
     */
    <localPropertyNames:{ p |private static final String PROP_LNAME_<p> = \"<p>\";<\n>private static final String PROP_<p> = nsName(PROP_LNAME_<p>);<\n>}>
    <endif> 
    <! !>
    <if(localInstanceNames)>
    /**
     * Local and namespace names of RDF(S) instances as strings
     */
    <localInstanceNames:{ i |private static final String INST_LNAME_<i> = \"<i>\";<\n>private static final String INST_<i> = nsName(INST_LNAME_<i>);<\n>}>
    <endif>
    <! !>
    /**
     * Returns the full namespace name of a vocabulary element as a string
     * @param localName  the local name of a vocabulary element as a string
     * @return the full namespace name of a vocabulary element as a string
     */
    private static String nsName(String localName) 
    {
      return NS + localName;
    }
  }
}
"